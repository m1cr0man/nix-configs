diff --git a/hosts/chuck/configuration.nix b/hosts/chuck/configuration.nix
new file mode 100644
index 0000000..d2768d9
--- /dev/null
+++ b/hosts/chuck/configuration.nix
@@ -0,0 +1,37 @@
+{ config, pkgs, lib, ... }:
+{
+  imports =
+    [
+      ./hardware-configuration.nix
+      ./samba-shares.nix
+      ../../common/sysconfig.nix
+      ../../services/ssh.nix
+    ];
+
+  m1cr0man.chronograf.reverseProxy = false;
+
+  system.stateVersion = "21.03";
+
+  # Use the systemd-boot EFI boot loader.
+  boot.loader.systemd-boot.enable = true;
+  boot.loader.efi.canTouchEfiVariables = true;
+  boot.initrd.network.enable = lib.mkForce false;
+
+  networking = {
+    hostId = "4c1ff1d9";
+    hostName = "chuck";
+    useDHCP = false;
+
+    usePredictableInterfaceNames = false;
+    interfaces.eth0.ipv4.addresses = [{
+      address = "192.168.137.2";
+      prefixLength = 24;
+    }];
+    interfaces.eth1.ipv4.addresses = [{
+      address = "192.168.14.1";
+      prefixLength = 24;
+    }];
+    defaultGateway = "192.168.14.254";
+    nameservers = [ "192.168.14.254" "1.1.1.1" ];
+  };
+}
diff --git a/hosts/chuck/hardware-configuration.nix b/hosts/chuck/hardware-configuration.nix
new file mode 100644
index 0000000..d69f388
--- /dev/null
+++ b/hosts/chuck/hardware-configuration.nix
@@ -0,0 +1,139 @@
+# Do not modify this file!  It was generated by ‘nixos-generate-config’
+# and may be overwritten by future invocations.  Please make changes
+# to /etc/nixos/configuration.nix instead.
+{ config, lib, pkgs, modulesPath, ... }:
+
+{
+  imports = [ ];
+
+  boot.initrd.availableKernelModules = [ "sd_mod" "sr_mod" ];
+  boot.initrd.kernelModules = [ ];
+  boot.kernelModules = [ ];
+  boot.extraModulePackages = [ ];
+
+  fileSystems."/" =
+    { device = "zchuck/nixos";
+      fsType = "zfs";
+    };
+
+  fileSystems."/boot" =
+    { device = "/dev/disk/by-uuid/35DD-8B37";
+      fsType = "vfat";
+    };
+
+  fileSystems."/drive_c" =
+    { device = "/dev/zd16p3";
+      fsType = "ntfs";
+    };
+
+  fileSystems."/nix" =
+    { device = "zchuck/nix_store";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/pcbackup/drive_d" =
+    { device = "zhuge2/pcbackup/drive_d";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/testing" =
+    { device = "zhuge2/testing";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zgaming/origin" =
+    { device = "zhuge2/zgaming/origin";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zgaming/origin/master" =
+    { device = "zhuge2/zgaming/origin/master";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zgaming/steam/master" =
+    { device = "zhuge2/zgaming/steam/master";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zgaming/archives/master" =
+    { device = "zhuge2/zgaming/archives/master";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/apps_drivers" =
+    { device = "zhuge2/zstorage/apps_drivers";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/games_stuff" =
+    { device = "zhuge2/zstorage/games_stuff";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/movies" =
+    { device = "zhuge2/zstorage/movies";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/music" =
+    { device = "zhuge2/zstorage/music";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/pc_backups" =
+    { device = "zhuge2/zstorage/pc_backups";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/pictures_videos" =
+    { device = "zhuge2/zstorage/pictures_videos";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/plex" =
+    { device = "zhuge2/zstorage/plex";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/plex/config" =
+    { device = "zhuge2/zstorage/plex/config";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/plex/transcode" =
+    { device = "zhuge2/zstorage/plex/transcode";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/quick_share" =
+    { device = "zhuge2/zstorage/quick_share";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/sites" =
+    { device = "zhuge2/zstorage/sites";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/users" =
+    { device = "zhuge2/zstorage/users";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/users/lucas" =
+    { device = "zhuge2/zstorage/users/lucas";
+      fsType = "zfs";
+    };
+
+  fileSystems."/zhuge2/zstorage/users/zeus" =
+    { device = "zhuge2/zstorage/users/zeus";
+      fsType = "zfs";
+    };
+
+  swapDevices =
+    [ { device = "/dev/disk/by-uuid/78e29356-990f-4dd8-a9b8-fa4efd01a9a9"; }
+    ];
+
+  virtualisation.hypervGuest.enable = true;
+}
diff --git a/hosts/chuck/samba-shares.nix b/hosts/chuck/samba-shares.nix
new file mode 100644
index 0000000..28666b0
--- /dev/null
+++ b/hosts/chuck/samba-shares.nix
@@ -0,0 +1,48 @@
+let
+  share = path: comment: {
+    inherit path comment;
+  };
+
+  mkUser = name: uid: {
+      inherit name uid;
+      home = "/zhuge2/zstorage/users/${name}";
+      useDefaultShell = true;
+      group = name;
+      extraGroups = [ "users" "wheel" ];
+  };
+in {
+  imports = [ ../../services/samba ];
+
+  m1cr0man.samba-shares = {
+    archives_master = share "/zhuge2/zgaming/archives/master" "Master old games archive";
+    steam_master = share "/zhuge2/zgaming/steam/master" "Master Steam archive";
+    origin_master = share "/zhuge2/zgaming/origin/master" "Master Origin archive";
+    apps_drivers = share "/zhuge2/zstorage/apps_drivers" "Apps and Drivers";
+    games_stuff = share "/zhuge2/zstorage/games_stuff" "Games Stuff";
+    movies = share "/zhuge2/zstorage/movies" "Movie backups";
+    music = share "/zhuge2/zstorage/music" "Music backups";
+    pc_backups = share "/zhuge2/zstorage/pc_backups" "Computer backups";
+    drive_c = share "/drive_c" "Old PC Drive C";
+    pictures_videos = share "/zhuge2/zstorage/pictures_videos" "Pictures and Videos";
+    sites = share "/zhuge2/zstorage/sites" "Websites";
+    quick_share = (share "/zhuge2/zstorage/quick_share" "Quick Share") // {
+      extraConfig = {
+        "guest ok" = "yes";
+      };
+    };
+  };
+
+  users.users = {
+    lucas = mkUser "lucas" 1000;
+    zeus = mkUser "zeus" 1001;
+    adam = mkUser "adam" 1002;
+    sophie = mkUser "sophie" 1003;
+  };
+
+  users.groups = {
+    lucas.gid = 1000;
+    zeus.gid = 1001;
+    adam.gid = 1002;
+    sophie.gid = 1003;
+  };
+}
diff --git a/services/samba.nix b/services/samba/default.nix
similarity index 61%
rename from services/samba.nix
rename to services/samba/default.nix
index bda920b..9b1655f 100644
--- a/services/samba.nix
+++ b/services/samba/default.nix
@@ -1,54 +1,49 @@
+{ config, lib, ... }:
 let
-  share = path: comment: {
-    inherit path comment;
+  homeShares = lib.optionalAttrs (config.m1cr0man.samba-home-shares) {
+    homes = {
+      comment = "Your personal folder";
+      "valid users" = "%S, %D%w%S";
+      "force group" = "%G";
+      "browseable" = "no";
+      "inherit acls" = "yes";
+      "create mask" = "0700";
+      "directory mask" = "0700";
+      "force create mode" = "0700";
+      "force directory mode" = "0700";
+    };
+  };
+
+  customShares = lib.mapAttrs (name: conf: {
+    path = conf.path;
+    comment = conf.comment;
     "valid users" = "@users";
     "guest ok" = "yes";
     "browseable" = "yes";
     "writeable" = "yes";
-  };
+  } // conf.extraConfig) config.m1cr0man.samba-shares;
 in {
+  imports = [
+    ./options.nix
+  ];
+
   services.samba = {
     enable = true;
-    syncPasswordsByPam = true;
-    shares = {
-      homes = {
-        comment = "Your personal folder";
-        "valid users" = "%S, %D%w%S";
-        "force group" = "%G";
-        "browseable" = "no";
-        "inherit acls" = "yes";
-        "create mask" = "0700";
-        "directory mask" = "0700";
-        "force create mode" = "0700";
-        "force directory mode" = "0700";
-      };
-      steam_master = share "/zgaming/steam/master" "Master Steam archive";
-      origin_master = share "/zgaming/origin/master" "Master Origin archive";
-      apps_drivers = share "/zstorage/apps_drivers" "Apps and Drivers";
-      games_stuff = share "/zstorage/games_stuff" "Games Stuff";
-      movies = share "/zstorage/movies" "Movie backups";
-      music = share "/zstorage/music" "Music backups";
-      pc_backups = share "/zstorage/pc_backups" "Computer backups";
-      pictures_videos = share "/zstorage/pictures_videos" "Pictures and Videos";
-      sites = share "/zstorage/sites" "Websites";
-      quick_share = (share "/zstorage/quick_share" "Quick Share") // {
-        "guest ok" = "yes";
-      };
-    };
+    shares = homeShares // customShares;
 
     extraConfig = ''
       log file = /var/log/samba/log.%m
       log level = 2
       max log size = 50
 
-      hosts allow = 192.168.14. 127.0.0.1 ::1
+      hosts allow = 192.168.14. 192.168.137. 127.0.0.1 ::1
       hosts deny = all
       socket options = IPTOS_LOWDELAY SO_SNDBUF=131072 SO_RCVBUF=131072 TCP_NODELAY
       max connections = 0
 
-      netbios name = INTERSECT
+      netbios name = ${lib.toUpper config.networking.hostName}
       workgroup = WORKGROUP
-      server string = Intersect File Server
+      server string = NixOS File Server
 
       domain master = no
       preferred master = yes
diff --git a/services/samba/options.nix b/services/samba/options.nix
new file mode 100644
index 0000000..184aa6d
--- /dev/null
+++ b/services/samba/options.nix
@@ -0,0 +1,40 @@
+{ lib, ... }:
+with lib;
+with types;
+let
+  shareOpts = { name, ... }: {
+    options = {
+      name = mkOption {
+        type = str;
+        default = name;
+        description = "Share name";
+      };
+      path = mkOption {
+        type = oneOf [ path str ];
+        default = 2;
+        description = "Share filesystem path";
+      };
+      comment = mkOption {
+        type = str;
+        default = "NixOS managed Samba share";
+        description = "Friendly description";
+      };
+      extraConfig = mkOption {
+        type = attrs;
+        default = { };
+        description = "Extra share config";
+      };
+    };
+  };
+
+in {
+  options.m1cr0man.samba-shares = mkOption {
+    default = {};
+    type = attrsOf (submodule shareOpts);
+  };
+  options.m1cr0man.samba-home-shares = mkOption {
+        type = bool;
+        default = true;
+        description = "Enable home shares";
+  };
+}
