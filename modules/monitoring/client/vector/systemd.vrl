results = []

active_state_map = {
  "active": 0.0,
  "reloading": 10.0,
  "activating": 20.0,
  "deactivating": 30.0,
  "inactive": 40.0,
  "failed": 50.0,
}

# Sub states are unique per unit type.
# We map many -> 1 in some cases for consistency.
sub_state_map = {
  "active": 0.0,
  "running": 0.0,
  "listening": 0.0,
  "mounted": 0.0,
  "waiting": 0.0,
  "reload": 1.0,
  "exited": 2.0,
  "dead": 3.0,
}

result_map = {
  "success": 0.0,
  "failed": 1.0,
}

base = {
  "namespace": "systemd",
  "kind": "absolute",
  "gauge": {},
  "tags": {
    # Will be read from environment at runtime
    "host": "${HOSTNAME}",
  }
}

if .message == "" {
  return .
}

# Key=Value data
# Units are split by double newlines.
units = split!(.message, "\n\n")
for_each(units) -> |_i, raw_unit| {
  unit, err = parse_key_value(raw_unit, field_delimiter: "\n")

  if err != null {
    log("Failed to parse unit data: {{ err }}", level: "error")
  } else {
    base_metric = base
    base_metric.tags.unit = downcase!(unit.Id)

    if exists(unit.Slice) {
      base_metric.tags.slice = downcase!(unit.Slice)
    }

    for_each(unit) -> |key, value| {
      fval = null

      # Type safety
      v = to_string(value) ?? "???"

      if key == "ActiveState" {
        fval = (get(active_state_map, [value]) ?? null)
        if fval == null {
          log("Unknown {{ key }} {{ v }}. Please update active_state_map", level: "warn")
        }
      } else if key == "SubState" {
        fval = (get(sub_state_map, [value]) ?? null)
        if fval == null {
          log("Unknown {{ key }} {{ v }}. Please update sub_state_map", level: "warn")
        }
      } else if match(key, r'Result') {
        fval = (get(result_map, [value]) ?? null)
        if fval == null {
          log("Unknown {{ key }} {{ v }}. Please update result_map", level: "warn")
        }
      } else {
        # Unix timestamps can be used as values. Strip the @ symbol off
        fval = to_float(replace(v, "@", "")) ?? null
        if fval == null {
          log("Could not parse {{ key }}={{ v }}", level: "debug")
        }
      }

      if fval != null {
        metric = base_metric

        # Escaping to get around vector's env var subsitution in the config
        metric.name = downcase(replace(key, r'([^A-Z]+|CPU|IP|IO)([A-Z]+)', "$${1}_$${2}"))
        metric.message = value
        metric.gauge.value = fval

        results = push(results, metric)
      }
    }
  }
}

. = results
